/*
 * This is the port on Gradle of the graphql-java-generator plugin.
 *
 * It's "just" a wrapper over the plugin logic which is available in this maven module: 
 * com.graphql-java-generator:graphql-maven-plugin-logic
 *
 * All unit tests can be found in the com.graphql-java-generator:graphql-maven-plugin-logic.
 * Integration tests are in this GIT project, that also hosts this plugin: 
 * https://github.com/graphql-java-generator/graphql-gradle-plugin-project
 * 
 */
buildscript {
    repositories {
		// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
		// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
        mavenLocal()
        mavenCentral()
    }
}

plugins {
	id "com.gradle.plugin-publish" version '1.2.0'
	id "java-gradle-plugin"
	id 'maven-publish'
	id "eclipse" // For use of this project within eclipse. For refresh, use: gradlew cleanEclipse eclipse
	id 'io.spring.dependency-management' version "${springDependencyManagementPluginVersion}"
}

// The publishing bloc is used to publish on localhost, and allow to test the plugin that will be published,
// before it is published to the gradle plugin portal
publishing {
    repositories {
        maven {
            name = 'localPluginRepository'
            url = 'build/local-plugin-repository'
        }
    }
    publications {
        myLibrary(MavenPublication) {
            from components.java
        }
    }
}

repositories {
	//  mavenLocal is used on development site, to get snapshot of the com.graphql-java-generator maven plugin, 
	// and relatives dependencies
	mavenLocal()
	mavenCentral()
}


dependencies {
	// This plugin is a wrapper of the logic already implemented in our maven plugin
	implementation ("com.graphql-java-generator:graphql-maven-plugin-logic:${project.version}") {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		exclude group: 'org.slf4j', module: 'slf4j-api'
		exclude group: 'net.minidev', module: 'json-smart'
	}
	implementation "org.springframework:spring-context:${springFrameworkVersion}"

	// Dependencies for tests
	testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	testImplementation platform("org.junit:junit-bom:${junitVersion}")
	testImplementation "org.junit.jupiter:junit-jupiter"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

compileJava {
    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"
    options.encoding = "UTF-8"
}
compileTestJava {
	options.encoding = "UTF-8"
}


tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation']
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

processResources {
	// Allows to get the project version in the application.properties resource file
    expand (projectVersion: project.version, graphqlMavenPluginLogicVersion: project.version)
}

test {
	// enable JUnit Platform (a.k.a. JUnit 5) support
	useJUnitPlatform()
}

gradlePlugin {
	website = 'https://github.com/graphql-java-generator/graphql-gradle-plugin-project'
	vcsUrl = 'https://github.com/graphql-java-generator/graphql-gradle-plugin-project.git'
	
	plugins {
		graphqlPlugin {
			id = 'com.graphql-java-generator.graphql-gradle-plugin3'
			displayName = 'graphql-gradle-plugin3'
			description = '''
graphql-gradle-plugin3 is a Gradle Plugin for GraphQL, based on graphql-java. It accelerates the development for both the client and the server, by generating the Java code.  It allows a quicker development when in contract-first approach, by avoiding to code the boilerplate code.
The graphql-gradle-plugin3 is compiled against SpringBoot3 and Spring Framework 6.
'''
			tags.addAll('graphql', 'graphql-java', 'graphql-java-generator', 'java', 'codegeneration', 'code generation', 'code-generation', 'generation', 'generate', 'template', 'templates')
			implementationClass = 'com.graphql_java_generator.gradleplugin.GraphQLPlugin'
		}
	}
}
