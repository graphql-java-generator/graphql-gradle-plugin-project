buildscript {
    repositories {
		// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
		// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
        mavenLocal()
        mavenCentral()
    }
    dependencies {
    	// The version number is not used in this multi-module project: the included build of graphql-gradle-plugin
    	// will replace this declaration. But this dummy declaration is needed!
    	//
    	// Of course, for a real use of the plugin in your project, you'll have to replace by the last plugin's version,
    	// or better: put this version number in the gradle.properties file, to use it for both the plugin and the dependencies version
        classpath 'com.graphql-java-generator:graphql-gradle-plugin:dummy'
    }
}

plugins {
	id 'java-library'
	id 'application'
	id 'com.graphql_java_generator.graphql-gradle-plugin'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementPluginVersion}"
}

repositories {
	mavenCentral()
	// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
	// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
	mavenLocal()
}

dependencies {

	// Dependencies for tests
	testImplementation "org.springframework.boot:spring-boot-starter-test" 
}

// The line below adds the generated sources as a java source folder
sourceSets.main.java.srcDirs += "$buildDir/generated/sources/generatePojo-server"

// Let's configure the GraphQL Gradle Plugin, for the code generation, for both the client and the server pojo
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
tasks.register('generateServerPojo', com.graphql_java_generator.gradleplugin.GeneratePojoTask) {
	mode = 'server'
	packageName = 'org.allGraphQLCases.server.pojo'
	schemaFileFolder = '../graphql-gradle-plugin-samples-allGraphQLCases-client/src/graphqls/allGraphQLCases'
	skipGenerationIfSchemaHasNotChanged = true
	customScalars = [ [
			graphQLTypeName: "Base64String",
			javaType: "byte[]",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeBase64String.GraphQLBase64String"
		], [
			graphQLTypeName: "Date",
			javaType: "java.util.Date",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date"
		], [
			graphQLTypeName: "DateTime",
			javaType: "java.time.OffsetDateTime",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.DateTime"
		], [
			graphQLTypeName: "else",
			javaType: "java.lang.String",
			graphQLScalarTypeGetter: "org.allGraphQLCases.GraphQLScalarTypeElse.getElseScalar()"
		], [
			graphQLTypeName: "Long",
			javaType: "java.lang.Long",
			graphQLScalarTypeStaticField: "graphql.Scalars.GraphQLLong"
		], [
			graphQLTypeName: "NonNegativeInt",
			javaType: "java.lang.Integer",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.NonNegativeInt"
	] ]
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////  NEXT LINES ARE HERE ONLY TO ALLOW THE INTEGRATION TESTS AGAINST THE SERVER GENERATED BY GraphQL Generator ////////
//////  That is: this project is both a sample, and an integration test                                           ////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

test {
	// enable JUnit Platform (a.k.a. JUnit 5) support
	useJUnitPlatform()
}
