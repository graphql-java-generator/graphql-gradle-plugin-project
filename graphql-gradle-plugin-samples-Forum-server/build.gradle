
buildscript {
    repositories {
		// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
		// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
        mavenLocal()
        mavenCentral()
    }
    
    dependencies {
    	// The version number is not used in this multi-module project: the included build of graphql-gradle-plugin
    	// will replace this declaration. But this dummy declaration is needed!
    	//
    	// Of course, for a real use of the plugin in your project, you'll have to replace by the last plugin's version,
    	// or better: put this version number in the gradle.properties file, to use it for both the plugin and the dependencies version
        classpath 'com.graphql-java-generator:graphql-gradle-plugin:dummy'
        
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.4.0'
    }
    
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.graphql_java_generator.graphql-gradle-plugin'

// Let's get the group and version for this project
apply from: '../graphql-gradle-plugin/common_conf.gradle'

repositories {
	// The plugin depends on the graphql-maven-plugin plugin logic module, which is in mavenCentral (for releases), and in mavenLocal 
	// when working on the plugin development.
	mavenCentral()
	mavenLocal()		// Only if you work on the plugin development
}

dependencies {
	// The graphql-java-client-dependencies module agregates all dependencies for the generated code
    implementation "com.graphql-java-generator:graphql-java-server-dependencies:${graphQLJavaGeneratorVersion}"
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    runtimeOnly "com.h2database:h2:${h2databaseVersion}"
	
	// Needed for Reactive implementation, to support the Subscription
	implementation "io.reactivex.rxjava2:rxjava:2.2.19"
    
    // Gives a GraphQL test UI available at http://localhost:8180/graphiql 
    runtimeOnly "com.graphql-java-kickstart:graphiql-spring-boot-starter:${graphiqlSpringBootStarterVersion}"

	// Dependencies for tests
	testImplementation "org.springframework:spring-test:${springFrameworkVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
}

// Of course, we need to generate the GraphQL's java code before compiling the project:
compileJava.dependsOn graphqlGenerateCode

// The line below adds the generated sources as a java source folder, in the IDE
sourceSets.main.java.srcDirs += '/build/generated/sources/graphqlGradlePlugin'

// Let's configure the GraphQL Gradle Plugin
graphql {
	mode = "server"
	generateBatchLoaderEnvironment = true
	generateJPAAnnotation = true
	javaTypeForIDType = "java.lang.Long"
	packageName = "org.forum.server.graphql"
	scanBasePackages = "org.forum.server.jpa ,  org.forum.server.specific_code"
	schemaPersonalizationFile = "src/main/graphql/forum_personalization.json"
	skipGenerationIfSchemaHasNotChanged = true
	customScalars = [ [
			graphQLTypeName: "Date",
			javaType: "java.util.Date",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date"
	] ]
}
