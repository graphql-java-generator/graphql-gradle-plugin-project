scalar Date

type Query {
    boards: [Board]
    nbBoards: Int
    topics(boardName: String!): [Topic]!
    findTopics(boardName: String!, keyword: [String!]): [Topic]
}

type Mutation {
	createBoard(name: String!, publiclyAvailable: Boolean): Board!
	createTopic(topic: TopicInput): Topic!
	createPost(post: PostInput!): Post!
	createPosts(spam: [PostInput!]!): [Post!]!
	createMember(input: MemberInput!): Member
}

type Subscription {
	subscribeToNewPost(boardName: String!): Post!
}

enum MemberType {
    ADMIN
    MODERATOR
    STANDARD
}

input MemberInput {
    name: String!
    alias: String
    email: String!
    type: MemberType
}

type Member {
    id: ID!
    name(uppercase: Boolean): String!
    alias: String
    email: String!
    type: MemberType
}

type Board {
    id: ID!
    name: String!
    publiclyAvailable: Boolean
    topics(since: Date): [Topic]!
}

type Topic {
    id: ID!
    date: Date!
    author: Member!
    publiclyAvailable: Boolean
    nbPosts: Int
    title: String!
    content: String
    posts(memberId: ID, memberName: String, since: Date!): [Post]!
}

type Post {
    id: ID!
    date: Date!
    author: Member
    publiclyAvailable: Boolean
    title: String!
    content: String!
}

input TopicPostInput {
    authorId: ID!
    date: Date!
    publiclyAvailable: Boolean
    title: String!
    content: String!
}

input TopicInput {
	boardId: ID!
	input: TopicPostInput
}

input PostInput {
	topicId: ID!
	input: TopicPostInput
	from: Date
	in: [Date!]
}


#############################
# Tests for issue #106

#type UnitPrice {
#	id: ID!
#	price: Float!
#	unit: String
#	currency: String
#}
#type CatalogItem {
#	id: ID!
#	name: String!
#}
#type PriceRecommendation {
#	id: ID!
#	name: String!
#}
#
#type PriceCatalog {
#	id: ID!
#	catalogItem: CatalogItem!
#	unitPrice: UnitPrice!
#	applicableFrom: String!
#	applicableTo: String
#	latestExtendedOn: String
#	""" Show first and last and implement pagination for the others, implement fragment for PriceRecommendation to include date, id """
#	linkedPriceRecommendations: [PriceRecommendation]
#}
#
#fragment PriceCatalogBase on PriceCatalog{
#	catalogItem { id}
#	unitPrice { price unit currency}
#	applicableFrom
#	applicableTo
#	latestExtendedOn
#}