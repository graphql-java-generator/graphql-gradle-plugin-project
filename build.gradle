buildscript {
    repositories {
		// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
		// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
        mavenLocal()
        mavenCentral()
    }
    dependencies {
    	// The version number is not used in this multi-module project: the included build of graphql-gradle-plugin
    	// will replace this declaration. But this dummy declaration is needed!
    	//
    	// Of course, for a real use of the plugin in your project, you'll have to replace by the last plugin's version,
    	// or better: put this version number in the gradle.properties file, to use it for both the plugin and the dependencies version
        classpath 'com.graphql-java-generator:graphql-gradle-plugin3:dummy'
    }
}

plugins {
	// Let's set the asciidoctor version for the docs module
	id 'org.asciidoctor.convert' version '1.5.6' apply false
	
	// The GraphQL plugin is activated here only to check its version
	id 'com.graphql-java-generator.graphql-gradle-plugin3'
}

def graphQLplugin3 = getPlugins().getPlugin('com.graphql-java-generator.graphql-gradle-plugin3')
if (graphQLplugin3 == null) {
	throw new ProjectConfigurationException("[Internal error] The GraphQL plugin 3 should have been added to the main build")
}
println "graphQLplugin3 version is " + graphQLplugin3.getVersion()
println "project version is ${project.version}" 
if (graphQLplugin3.getVersion() != "${project.version}") {
	throw new GradleException(
		"The plugin3 version and the project version should be identical, but plugin version is '"
			+ graphQLplugin3.getVersion()+ "' whereas the project version is '${project.version}'")
}


/**
 * This task checks that the configuration is ok to execute the copySamplesFromMavenPlugin on sub projects
 */
tasks.register('copySamplesFromMavenPlugin')
tasks.named('copySamplesFromMavenPlugin') {
	doFirst {
		if (System.properties['graphqlGradlePlugin.graphqlMavenPluginProject.path'] == null) {
			throw new GradleException(
				"The 'graphqlGradlePlugin.graphqlMavenPluginProject.path' system property must be defined. For more information, see https://github.com/graphql-java-generator/graphql-maven-plugin-project/wiki/internal_howto_release#how-to-release-the-gradle-plugin");
		}
	}
}


// Let's set some parameters and tasks that are common to all sub projects
subprojects {

	// The '-parameters' compiler parameter allows to keep the parameter names in the generated code. It's useful for some tests.
	// It has no impact on the plugin, as it is in a separate build.
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-parameters'
    }	

	compileJava {
	    sourceCompatibility = "${javaVersion}"
	    targetCompatibility = "${javaVersion}"
	    options.encoding = "UTF-8"
	}
	compileTestJava {
		options.encoding = "UTF-8"
	}

	/**
	 * For samples project, we add the copySamplesFromMavenPlugin task.
	 *
	 * This tasks allows to copy the code (main and test, java and resources) from the maven module of the same name into the gradle one.
	 * This allow to test the gradle plugin in the same way, as the maven plugin is.
	 */
	if (project.name.contains('samples') && System.properties['graphqlGradlePlugin.graphqlMavenPluginProject.path'] != null) {
	
		task cleanSamplesCode() {
			group = "Preparation"
			description = "Delete the src folder (to allow fresh copy of the sources from the GraphQL maven sample code)"

			// The action for this task is to delete the src folder
			doLast {
				delete 'src'
			}
		}

		tasks.register('copySamplesFromMavenPlugin', Copy)
		tasks.named('copySamplesFromMavenPlugin', Copy) {							
			// Please set the systemProp.graphqlGradlePlugin.graphqlMavenPluginProject.path in the gradle.properties to the
			// full path for the graphql-maven-plugin-project folder
			// OR IGNORE IF YOU JUST BUILD THE GRADLE PLUGIN as a standalone
			// 
			// Let's the source files from the graphql-maven-plugin-samples-XXX folder into the current project
		    from(System.properties['graphqlGradlePlugin.graphqlMavenPluginProject.path'] +'/graphql-maven-plugin-samples/' + project.name.replace('gradle', 'maven')) {
		    	include "/src/**"
		    }
		    into "${project.projectDir}"
		    
		    dependsOn cleanSamplesCode
		    mustRunAfter cleanSamplesCode

			doFirst {
				group = "Preparation"
				description = "Copy the sources from the GraphQL maven plugin to the Gradle plugin"
	
				println "copy from: " + System.properties['graphqlGradlePlugin.graphqlMavenPluginProject.path'] +'/graphql-maven-plugin-samples/' + project.name.replace('gradle', 'maven')
				println "copy into: ${project.projectDir}"
			}
		}
	}
}




task cleanPlugin3Code() {
	group = 'Preparation'
	description = "Delete the graphql-gradle-plugin3/src folder (to allow fresh copy of the sources from the graphql-gradle-plugin's code)"

	// The action for this task is to delete the src folder
	doLast {
		delete 'graphql-gradle-plugin3/src'
	}
}

tasks.register('cleanAll', Delete)
tasks.named('cleanAll', Delete) {
	dependsOn clean
	
	doLast {
		println("Executing cleanAll task ($rootProject.projectDir)")
		
		// Let's execute the default task, which will also clean the subprojects
		delete "build/"
		delete "buildSrc/build/"
		delete "target/"
		
		// Let's clean the two plugins
		delete "graphql-gradle-plugin/build/"
		delete "graphql-gradle-plugin3/build/"
		
		// Let's loop into each subproject
		subprojects {
			println("  Executing cleanAll task for subproject $project.name ($project.projectDir/bin)")
			delete "$project.projectDir/bin"
			delete "$project.projectDir/build"
			delete "$project.projectDir/build2"
			delete "$project.projectDir/target"
			delete "$project.projectDir/target2"
		}
	}
}

tasks.named("clean") {
	actions.clear()
	doLast {
		println("Executing overrided clean task ($rootProject.projectDir)")
		
		// Let's execute the default task, which will also clean the subprojects
		delete "build/"
		delete "buildSrc/build/"
		delete "target/"
		delete "toto/"
		
		// Let's clean the two plugins
		delete "graphql-gradle-plugin/build/"
		delete "graphql-gradle-plugin3/build/"
		
		// Let's loop into each subproject
		subprojects {
			println("  Executing overrided clean task for subproject $project.name ($project.projectDir/bin)")
			delete "$project.projectDir/bin"
			delete "$project.projectDir/build"
			delete "$project.projectDir/build2"
			delete "$project.projectDir/target"
			delete "$project.projectDir/target2"
		}
	}
}


task publishPlugins {
	dependsOn(gradle.includedBuild('graphql-gradle-plugin3').task(':publishPlugins'))	
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////  TASKS THAT STARTS AND STOPS THE GRAPHQL SERVERS TO ALLOW INTEGRATION TESTS                                ////////
//////  This part includes the dependencies for the other tasks                                                   ////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Let's import the custom plugin we defined in buildSrc of the root project
import com.graphql_java_generator.gradle_task.StartApp
import com.graphql_java_generator.gradle_task.StopApp

gradle.sharedServices.registerIfAbsent("startApp", com.graphql_java_generator.gradle_task.ProcessesService.class, service -> {/*No action*/})

task startAllGraphQLCasesServer(type: StartApp) {
	// Let's start the server that matches the current client project
	jarFile = file("graphql-gradle-plugin-samples-allGraphQLCases-server/build/libs/graphql-gradle-plugin-samples-allGraphQLCases-server-${project.version}.jar")
	url = 'http://localhost:8180/helloworld.html'

	// The next lines insures that the relevant server project is built before starting the integration test from this client module.
	dependsOn ":graphql-gradle-plugin-samples-allGraphQLCases-server:bootJar"

	// The stopWebApp must be attached here. And must run after tests
	finalizedBy 'stopAllGraphQLCasesServer'
}

task stopAllGraphQLCasesServer(type: StopApp) {
	// The line blow is executed during configuration phase. So the process is unknown.
	// We just define the Task object. The StopApp task will read the process id at execution time
	startAppTaskPath = tasks["startAllGraphQLCasesServer"].path

	// The stopWebApp is attached to startWebApp, and must run after tests
	dependsOn 'startAllGraphQLCasesServer'
	mustRunAfter ":graphql-gradle-plugin-samples-allGraphQLCases-client:test"
	mustRunAfter ":graphql-gradle-plugin-samples-Forum-client:test"
}

task startForumServer(type: StartApp) {
	// Let's start the server that matches the current client project
	jarFile = file("graphql-gradle-plugin-samples-Forum-server/build/libs/graphql-gradle-plugin-samples-Forum-server-${project.version}.jar")
	url = 'http://localhost:8182/graphiql'

	// The next lines insures that the relevant server project is built before starting the integration test from this client module.
	dependsOn ":graphql-gradle-plugin-samples-Forum-server:bootJar"

	// The stopForumServer must be attached here. And must run after tests
	finalizedBy 'stopForumServer'
}

task stopForumServer(type: StopApp) {
	// The line blow is executed during configuration phase. So the process is unknown.
	// We just define the Task object. The StopApp task will read the process id at execution time
	startAppTaskPath = tasks["startForumServer"].path

	// The stopForumServer is attached to startForumServer, and must run after tests
	dependsOn 'startForumServer'
	mustRunAfter ":graphql-gradle-plugin-samples-allGraphQLCases-client:test"
	mustRunAfter ":graphql-gradle-plugin-samples-Forum-client:test"

}

task startAuthorizationServer(type: StartApp) {
	// Let's start the server that matches the current client project
	jarFile = file("graphql-gradle-plugin-samples-OAuth-authorization-server/build/libs/graphql-gradle-plugin-samples-OAuth-authorization-server-${project.version}.jar")
	url = 'http://localhost:8181/helloWorld'

	// The next lines insures that the relevant server project is built before starting the integration test from this client module.
	dependsOn ":graphql-gradle-plugin-samples-OAuth-authorization-server:bootJar"

	// The stopWebApp must be attached here. And must run after tests
	finalizedBy 'stopAuthorizationServer'
}

task stopAuthorizationServer(type: StopApp) {
	// The line blow is executed during configuration phase. So the process is unknown.
	// We just define the Task object. The StopApp task will read the process id at execution time
	startAppTaskPath = tasks["startAuthorizationServer"].path

	// The stopWebApp is attached to startWebApp, and must run after tests
	dependsOn 'startAuthorizationServer'
	mustRunAfter ":graphql-gradle-plugin-samples-allGraphQLCases-client:test"
	mustRunAfter ":graphql-gradle-plugin-samples-Forum-client:test"
}

