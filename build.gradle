buildscript {
    repositories {
		// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
		// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
        mavenLocal()
        mavenCentral()
    }
    dependencies {
    	// The version number is not used in this multi-module project: the included build of graphql-gradle-plugin
    	// will replace this declaration. But this dummy declaration is needed!
    	//
    	// Of course, for a real use of the plugin in your project, you'll have to replace by the last plugin's version,
    	// or better: put this version number in the gradle.properties file, to use it for both the plugin and the dependencies version
        classpath 'com.graphql-java-generator:graphql-gradle-plugin:dummy'
        classpath 'com.graphql-java-generator:graphql-gradle-plugin3:dummy'
    }
}

plugins {
	// Let's set the asciidoctor version for the docs module
	id 'org.asciidoctor.convert' version '1.5.6' apply false
	
	// The GraphQL plugin is activated here only to check its version
	id 'com.graphql-java-generator.graphql-gradle-plugin'
	id 'com.graphql-java-generator.graphql-gradle-plugin3'
}


// Let's get the group and version for this project
//apply from: 'graphql-gradle-plugin/gradle.properties'

def graphQLplugin = getPlugins().getPlugin('com.graphql-java-generator.graphql-gradle-plugin')
if (graphQLplugin == null) {
	throw new ProjectConfigurationException("[Internal error] The GraphQL plugin should have been added to the main build")
}
def graphQLplugin3 = getPlugins().getPlugin('com.graphql-java-generator.graphql-gradle-plugin3')
if (graphQLplugin3 == null) {
	throw new ProjectConfigurationException("[Internal error] The GraphQL plugin 3 should have been added to the main build")
}
println "graphQLplugin version is " + graphQLplugin.getVersion()
println "graphQLplugin3 version is " + graphQLplugin3.getVersion()
println "project version is ${project.version}" 
if (graphQLplugin.getVersion() != "${project.version}") {
	throw new GradleException(
		"The plugin version and the project version should be identical, but plugin version is '"
			+ graphQLplugin.getVersion()+ "' whereas the project version is '${project.version}'")
}
if (graphQLplugin3.getVersion() != "${project.version}") {
	throw new GradleException(
		"The plugin3 version and the project version should be identical, but plugin version is '"
			+ graphQLplugin3.getVersion()+ "' whereas the project version is '${project.version}'")
}

subprojects {

	// The '-parameters' compiler parameter allows to keep the parameter names in the generated code. It's useful for some tests.
	// It has no impact on the plugin, as it is in a separate build.
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-parameters'
    }	

	/**
	 * For samples project, we add the copySamplesFromMavenPlugin task.
	 *
	 * This tasks allows to copy the code (main and test, java and resources) from the maven module of the same name into the gradle one.
	 * This allow to test the gradle plugin in the same way, as the maven plugin is.
	 */
	if (project.name.contains('samples') && System.properties['graphqlGradlePlugin.graphqlMavenPluginProject.path'] != null) {
	
		task cleanSamplesCode() {
			group = "Preparation"
			description = "Delete the src folder (to allow fresh copy of the sources from the GraphQL maven sample code)"

			// The action for this task is to delete the src folder
			doLast {
				delete 'src'
			}
		}

		task copySamplesFromMavenPlugin(type: Copy) {
			group = "Preparation"
			description = "Copy the sources from the GraphQL maven plugin to the Gradle plugin"

			doLast {
				println "copy from: " + System.properties['graphqlGradlePlugin.graphqlMavenPluginProject.path'] +'/graphql-maven-plugin-samples/' + project.name.replace('gradle', 'maven')
				println "copy into: ${project.projectDir}"
			}
							
			// Please set the systemProp.graphqlGradlePlugin.graphqlMavenPluginProject.path in the gradle.properties to the
			// full path for the graphql-maven-plugin-project folder
			// OR IGNORE IF YOU JUST BUILD THE GRADLE PLUGIN as a standalone
			// 
			// Let's the source files from the graphql-maven-plugin-samples-XXX folder into the current project
		    from(System.properties['graphqlGradlePlugin.graphqlMavenPluginProject.path'] +'/graphql-maven-plugin-samples/' + project.name.replace('gradle', 'maven')) {
		    	include "/src/graphqls/**"
		    	include "/src/main/**"
		    	include "/src/test/**"
		    }
		    into "${project.projectDir}"
		    
		    dependsOn cleanSamplesCode
		    mustRunAfter cleanSamplesCode
		}
	}
}




task cleanPlugin3Code() {
	group = 'Preparation'
	description = "Delete the graphql-gradle-plugin3/src folder (to allow fresh copy of the sources from the graphql-gradle-plugin's code)"

	// The action for this task is to delete the src folder
	doLast {
		delete 'graphql-gradle-plugin3/src'
	}
}
/**
 * This task copies the code and dependencies version (in the gradle.properties file) from this project into the graphql-gradle-plugin3 folder  
 */
task copyPluginCodeToPlugin3(type: Copy) {
	group = 'Preparation'
	description = 'Copy the plugin code from the graphql-gradle-plugin to the graphql-gradle-plugin3 folder'

	doLast {
		println 'Coping the src folder (and gradle.properties) from graphql-gradle-plugin to graphql-gradle-plugin3'
	}
						
    from('graphql-gradle-plugin') {
    	include "gradle.properties"
	    include "src/**"
    }
    into 'graphql-gradle-plugin3'

    dependsOn cleanPlugin3Code
    mustRunAfter cleanPlugin3Code
}

