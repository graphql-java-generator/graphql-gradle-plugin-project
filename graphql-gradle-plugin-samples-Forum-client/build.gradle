buildscript {
    repositories {
		// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
		// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
        mavenLocal()
        mavenCentral()
    }
    dependencies {
    	// The version number is not used in this multi-module project: the included build of graphql-gradle-plugin
    	// will replace this declaration. But this dummy declaration is needed!
    	//
    	// Of course, for a real use of the plugin in your project, you'll have to replace by the last plugin's version,
    	// or better: put this version number in the gradle.properties file, to use it for both the plugin and the dependencies version
        classpath 'com.graphql-java-generator:graphql-gradle-plugin:dummy'
    }
}

apply plugin:  'java-library'
apply plugin:  'com.graphql_java_generator.graphql-gradle-plugin'

repositories {
	mavenCentral()
	// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
	// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
	mavenLocal()
}

// Let's get the group and version for this project
apply from: '../graphql-gradle-plugin/common_conf.gradle'

dependencies {
	// The graphql-java-client-dependencies module agregates all dependencies for the generated code
    implementation "com.graphql-java-generator:graphql-java-client-dependencies:${graphQLJavaGeneratorVersion}"

	// Dependencies for Web Socket. In the next version, they will be integratd into the graphql-java-client-dependencies module
	implementation "javax.websocket:javax.websocket-api:1.1"
	implementation "org.eclipse.jetty:jetty-webapp:9.4.27.v20200227"
	implementation "org.eclipse.jetty:jetty-server:9.4.27.v20200227"
	implementation "org.eclipse.jetty.websocket:javax-websocket-server-impl:9.4.27.v20200227"
	implementation "org.eclipse.jetty:jetty-annotations:9.4.27.v20200227"
	
	// Dependencies for tests
	testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}" 
}

// The line below makes the GraphQL plugin be executed before Java compiles, so that all sources are generated on time
compileJava.dependsOn graphqlGenerateCode
compileJava.dependsOn graphqlGenerateCode

// The line below adds the generated sources as a java source folder, in the IDE
sourceSets.main.java.srcDirs += '/build/generated/sources/graphqlGradlePlugin'

// Let's configure the GraphQL Gradle Plugin
graphql {
	mode = "client"  //This line is here only for the demo, as client is the default mode
	packageName = "com.graphql_java_generator.samples.forum.client.graphql.forum.client"
	skipGenerationIfSchemaHasNotChanged = true
	customScalars = [ [
			graphQLTypeName: "Date",
			javaType: "java.util.Date",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date"
	] ]
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////  NEXT LINES ARE HERE ONLY TO ALLOW THE INTEGRATION TESTS AGAINST THE SERVER GENERATED BY GraphQL Generator ////////
//////  That is: this project is both a sample, and an integration test                                           ////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

test {
	// enable JUnit Platform (a.k.a. JUnit 5) support
	useJUnitPlatform()
}

//Let's import the custom plugin we defined in buildSrc of the root project
import com.graphql_java_generator.gradle_task.StartApp
import com.graphql_java_generator.gradle_task.StopApp


task startForumServer(type: StartApp) {
	// Let's start the server that matches the current client project
	jarFile = file("../${project.name}/build/libs/${project.name}-${project.version}.jar".replaceAll('client', 'server'))
	url = 'http://localhost:8182/graphiql'

	// The next lines insures that the relevant server project is built before starting the integration test from this client module.
	dependsOn ":${project.name}:bootJar".replaceAll('client', 'server')

	// The stopForumServer must be attached here. And must run after tests
	finalizedBy 'stopForumServer'
}

task stopForumServer(type: StopApp) {
	// The line blow is executed during configuration phase. So the process is unknown. 
	// We just define the Task object. The StopApp task will read the process id at execution time
	startAppTask = tasks["startForumServer"]

	// The stopForumServer is attached to startForumServer, and must run after tests
	mustRunAfter test
}

// The next lines insures that the Basic-server is built before starting the integration test from the client.
// Using mustRunAfter instead of dependsOn allows to manually start the server, then just execute the test task.
test.dependsOn startForumServer
