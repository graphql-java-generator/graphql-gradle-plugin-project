plugins {
	id 'java'
	id 'application'
	id 'com.graphql-java-generator.graphql-gradle-plugin3'
	id 'org.springframework.boot' version "${spring3_springBootVersion}"
	id 'io.spring.dependency-management' version "${spring3_DependencyManagementPluginVersion}"
}
sourceCompatibility = '17'
mainClassName = 'com.graphql_java_generator.samples.forum.SpringMain'
 
repositories {
	mavenCentral()
	// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
	// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
	mavenLocal()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	// The graphql-java-client-dependencies module agregates all dependencies for the generated code
    implementation "com.graphql-java-generator:graphql-java-client-runtime:${project.version}"
	
	// Dependencies for tests
	testImplementation "org.springframework.boot:spring-boot-starter-test" 
}

// The line below adds the generated sources as a java source folder, in the IDE
sourceSets.main.java.srcDirs += '/build/generated/sources/graphqlGradlePlugin'

// Let's configure the GraphQL Gradle Plugin
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
generateClientCode {
	packageName = "com.graphql_java_generator.samples.forum.client.graphql.forum.client"
	customScalars = [ [
			graphQLTypeName: "Date",
			javaType: "java.util.Date",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date"
	] ]
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////  NEXT LINES ARE HERE ONLY TO ALLOW THE INTEGRATION TESTS AGAINST THE SERVER GENERATED BY GraphQL Generator ////////
//////  That is: this project is both a sample, and an integration test                                           ////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

test {
	// enable JUnit Platform (a.k.a. JUnit 5) support
	useJUnitPlatform()
}

// The next lines insures that the necessary servers are started before starting the integration test from the client.
test.dependsOn ":startAuthorizationServer"
test.dependsOn ":startForumServer"
// On slow computer, trandom errors can occur due to overload, when all tests are running in the same time. So, let's do it one after the other
test.dependsOn ":graphql-gradle-plugin-samples-allGraphQLCases-client:test" 
