scalar Date

schema {
    query: QueryType
    mutation: MutationType
    subscription: SubscriptionType
}

type QueryType {
    boards: [Board]
    nbBoards: Int
    topics(boardName: String!): [Topic]!
    findTopics(boardName: String!, keyword: [String!]): [Topic]
}

type MutationType {
	createBoard(name: String!, publiclyAvailable: Boolean): Board!
	createTopic(topic: TopicInput): Topic!
	createPost(post: PostInput!): Post!
	createPosts(spam: [PostInput!]!): [Post!]!
	createMember(input: MemberInput!): Member
}

type SubscriptionType {
	subscribeToNewPost(boardName: String!): Post!
}

enum MemberType {
    ADMIN
    MODERATOR
    STANDARD
}

input MemberInput {
    name: String!
    alias: String
    email: String!
    type: MemberType
}

type Member {
    id: ID!
    name(uppercase: Boolean): String!
    alias: String
    email: String!
    type: MemberType
}

type Board {
    id: ID!
    name: String!
    publiclyAvailable: Boolean
    topics(since: Date): [Topic]!
}

type Topic {
    id: ID!
    date: Date!
    author: Member!
    publiclyAvailable: Boolean
    nbPosts: Int
    title: String!
    content: String
    posts(memberId: ID, memberName: String, since: Date!): [Post]!
}

type Post {
    id: ID!
    date: Date!
    author: Member
    publiclyAvailable: Boolean
    title: String!
    content: String!
}

input TopicPostInput {
    authorId: ID!
    date: Date!
    publiclyAvailable: Boolean
    title: String!
    content: String!
}

input TopicInput {
	boardId: ID!
	input: TopicPostInput
}

input PostInput {
	topicId: ID!
	input: TopicPostInput
	from: Date
	in: [Date!]
}
