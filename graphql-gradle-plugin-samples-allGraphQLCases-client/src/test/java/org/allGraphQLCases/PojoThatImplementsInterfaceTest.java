/**
 * 
 */
package org.allGraphQLCases;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.allGraphQLCases.client.IBar1;
import org.allGraphQLCases.client.IBar12;
import org.allGraphQLCases.client.IBar2;
import org.allGraphQLCases.client.IFoo1;
import org.allGraphQLCases.client.TBar1;
import org.allGraphQLCases.client.TBar12;
import org.allGraphQLCases.client.TBar2;
import org.allGraphQLCases.client.TFoo1;
import org.allGraphQLCases.client.TFoo12;
import org.junit.jupiter.api.Test;

/**
 * This JUnit test class execute tests on the generated code. It should be in the graphql-maven-plugin-project, but this
 * would need to add the code generated by the Junit test to be part of the test-compilation goal, which is not
 * possible.
 * 
 * @author etienne-sf
 */
public class PojoThatImplementsInterfaceTest {

	@Test
	void testSetterForTypeThatImplementsOneInterface() {
		IFoo1 ifoo1 = new TFoo1();
		TFoo1 tfoo1 = new TFoo1();
		TBar1 tbar1 = new TBar1();
		IBar1 ibar1 = new TBar1();

		//////////////////////////////////////////////////////////////////////
		// Setter for IFoo1
		//////////////////////////////////////////////////////////////////////

		assertNull(ifoo1.getBar());

		ifoo1.setBar(tbar1);
		assertEquals(tbar1, ifoo1.getBar());

		ifoo1.setBar(ibar1);
		assertEquals(ibar1, ifoo1.getBar());

		// Issue #124: setting a field to null raise an exception
		ifoo1.setBar(null);
		assertNull(ifoo1.getBar());

		//////////////////////////////////////////////////////////////////////
		// Setter for TFoo1
		//////////////////////////////////////////////////////////////////////

		assertNull(tfoo1.getBar());

		tfoo1.setBar(tbar1);
		assertEquals(tbar1, tfoo1.getBar());

		tfoo1.setBar(ibar1);
		assertEquals(ibar1, tfoo1.getBar());

		// Check of issue #124 correction: setting a field to null should not raise an exception
		tfoo1.setBar(null);
		assertNull(tfoo1.getBar());
	}

	@Test
	void testSetterForTypeThatImplementsTwoInterfaces() {
		IllegalArgumentException e;

		IFoo1 ifoo1 = new TFoo1();
		TFoo1 tfoo1 = new TFoo1();
		TFoo12 ifoo12 = new TFoo12();
		TFoo12 tfoo12 = new TFoo12();

		TBar1 tbar1 = new TBar1();
		IBar1 ibar1 = new TBar1();
		TBar2 tbar2 = new TBar2();
		IBar2 ibar2 = new TBar2();
		TBar12 tbar12 = new TBar12();
		IBar12 ibar12 = new TBar12();

		//////////////////////////////////////////////////////////////////////
		// Setter for IFoo1
		//////////////////////////////////////////////////////////////////////
		assertNull(ifoo1.getBar());

		ifoo1.setBar(tbar1);
		assertEquals(tbar1, ifoo1.getBar());
		ifoo1.setBar(ibar1);
		assertEquals(ibar1, ifoo1.getBar());

		e = assertThrows(IllegalArgumentException.class, () -> ifoo1.setBar(tbar2));
		e = assertThrows(IllegalArgumentException.class, () -> ifoo1.setBar(ibar2));

		e = assertThrows(IllegalArgumentException.class, () -> ifoo1.setBar(tbar12));
		e = assertThrows(IllegalArgumentException.class, () -> ifoo1.setBar(ibar12));

		// Check of issue #124 correction: setting a field to null should not raise an exception
		ifoo1.setBar(null);
		assertNull(ifoo1.getBar());

		//////////////////////////////////////////////////////////////////////
		// Setter for TFoo1
		//////////////////////////////////////////////////////////////////////
		assertNull(tfoo1.getBar());

		tfoo1.setBar(tbar1);
		assertEquals(tbar1, tfoo1.getBar());
		tfoo1.setBar(ibar1);
		assertEquals(ibar1, tfoo1.getBar());

		e = assertThrows(IllegalArgumentException.class, () -> tfoo1.setBar(tbar2));
		e = assertThrows(IllegalArgumentException.class, () -> tfoo1.setBar(ibar2));

		e = assertThrows(IllegalArgumentException.class, () -> tfoo1.setBar(tbar12));
		e = assertThrows(IllegalArgumentException.class, () -> tfoo1.setBar(ibar12));

		// Check of issue #124 correction: setting a field to null should not raise an exception
		tfoo1.setBar(null);
		assertNull(tfoo1.getBar());

		//////////////////////////////////////////////////////////////////////
		// Setter for IFoo12
		//////////////////////////////////////////////////////////////////////
		assertNull(ifoo12.getBar());

		e = assertThrows(IllegalArgumentException.class, () -> ifoo12.setBar(tbar1));
		e = assertThrows(IllegalArgumentException.class, () -> ifoo12.setBar(ibar1));

		e = assertThrows(IllegalArgumentException.class, () -> ifoo12.setBar(tbar2));
		e = assertThrows(IllegalArgumentException.class, () -> ifoo12.setBar(ibar2));

		ifoo12.setBar(tbar12);
		assertEquals(tbar12, ifoo12.getBar());
		ifoo12.setBar(ibar12);
		assertEquals(ibar12, ifoo12.getBar());

		// Check of issue #124 correction: setting a field to null should not raise an exception
		ifoo12.setBar(null);
		assertNull(ifoo12.getBar());

		//////////////////////////////////////////////////////////////////////
		// Setter for TFoo12
		//////////////////////////////////////////////////////////////////////
		assertNull(tfoo12.getBar());

		e = assertThrows(IllegalArgumentException.class, () -> tfoo12.setBar(tbar1));
		e = assertThrows(IllegalArgumentException.class, () -> tfoo12.setBar(ibar1));

		e = assertThrows(IllegalArgumentException.class, () -> tfoo12.setBar(tbar2));
		e = assertThrows(IllegalArgumentException.class, () -> tfoo12.setBar(ibar2));

		tfoo12.setBar(tbar12);
		assertEquals(tbar12, tfoo12.getBar());
		tfoo12.setBar(ibar12);
		assertEquals(ibar12, tfoo12.getBar());

		// Check of issue #124 correction: setting a field to null should not raise an exception
		tfoo12.setBar(null);
		assertNull(tfoo12.getBar());
	}

}
