buildscript {
    repositories {
		// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
		// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
        mavenLocal()
        mavenCentral()
    }
    dependencies {
    	// The version number is not used in this multi-module project: the included build of graphql-gradle-plugin
    	// will replace this declaration. But this dummy declaration is needed!
    	//
    	// Of course, for a real use of the plugin in your project, you'll have to replace by the last plugin's version,
    	// or better: put this version number in the gradle.properties file, to use it for both the plugin and the dependencies version
        classpath 'com.graphql-java-generator:graphql-gradle-plugin:dummy'
    }
}

plugins {
	id 'java-library'
	id 'application'
	id 'com.graphql_java_generator.graphql-gradle-plugin'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementPluginVersion}"
}

mainClassName = 'org.allGraphQLCases.demo.Main'

repositories {
	mavenCentral()
	// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
	// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
	mavenLocal()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	// The graphql-java-client-dependencies module agregates all dependencies for the generated code
    implementation "com.graphql-java-generator:graphql-java-client-dependencies:${project.version}"
    // This project uses some custom scalars from the graphql-java-extended-scalars module
    implementation "com.graphql-java:graphql-java-extended-scalars:${graphqlJavaExtendedScalarsVersion}"
    // This project checks OAuth 
    implementation 'org.springframework.security:spring-security-oauth2-client' 

	// Dependencies for tests
	testImplementation "org.springframework.boot:spring-boot-starter-test"
}



// Let's configure the GraphQL Gradle Plugin, for the merge task
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
generateGraphQLSchema {
	schemaFileFolder = 'src/graphqls/allGraphQLCases/'
	targetFolder = "$buildDir/generated/resources/generateGraphQLSchema"
	targetSchemaFileName = 'merged_schemas.graphqls'
}

// Let's configure the GraphQL Gradle Plugin, for the code generation
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
tasks.register('generateClientCodeAllGraphQLCases', com.graphql_java_generator.gradleplugin.GenerateClientCodeTask) {
	// In this sample, the GraphQL code generation works on the generated schema.
	dependsOn generateGraphQLSchema
	
	// Task properties
	packageName = 'org.allGraphQLCases.client'
	schemaFileFolder = "$buildDir/generated/resources/generateGraphQLSchema" // Let's read the merged GraphQL schema
	separateUtilityClasses = true
	skipGenerationIfSchemaHasNotChanged = true
	springBeanSuffix = 'AllGraphQLCases'
	
	// Prefixes and suffixes for the generated POJOs
	inputPrefix = "CINP_"
	inputSuffix = "_CINS"
	typePrefix = "CTP_"
	typeSuffix = "_CTS"
	interfacePrefix = "CIP_"
	interfaceSuffix = "_CIS"
	unionPrefix = "CUP_"
	unionSuffix = "_CUS"
	enumPrefix = "CEP_"
	enumSuffix = "_CES"

	customScalars = [ [
			graphQLTypeName: "Base64String",
			javaType: "byte[]",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeBase64String.GraphQLBase64String"
		], [
			graphQLTypeName: "Date",
			javaType: "java.util.Date",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date"
		], [
			graphQLTypeName: "DateTime",
			javaType: "java.time.OffsetDateTime",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.DateTime"
		], [
			graphQLTypeName: "else",
			javaType: "java.lang.String",
			graphQLScalarTypeGetter: "org.allGraphQLCases.demo.GraphQLScalarTypeElse.getElseScalar()"
		], [
			graphQLTypeName: "Long",
			javaType: "java.lang.Long",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.GraphQLLong"
		], [
			graphQLTypeName: "NonNegativeInt",
			javaType: "java.lang.Integer",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.NonNegativeInt"
	] ]
}

//Let's configure a second generation of the same Schema. This allows to check possible collision between Spring Beans
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
tasks.register('generateClientCodeAllGraphQLCases2', com.graphql_java_generator.gradleplugin.GenerateClientCodeTask) {
	// In this sample, the GraphQL code generation works on the generated schema.
	dependsOn generateGraphQLSchema
	
	// Task properties
	copyRuntimeSources = false
	packageName = 'org.allGraphQLCases.client2'
	schemaFileFolder = "$buildDir/generated/resources/generateGraphQLSchema" // Let's read the merged GraphQL schema
	separateUtilityClasses = true
	skipGenerationIfSchemaHasNotChanged = true
	springBeanSuffix = 'AllGraphQLCases2'
	targetSourceFolder = "$buildDir/generated/sources/graphqlGradlePlugin2"
	customScalars = [ [
			graphQLTypeName: "Base64String",
			javaType: "byte[]",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeBase64String.GraphQLBase64String"
		], [
			graphQLTypeName: "Date",
			javaType: "java.util.Date",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date"
		], [
			graphQLTypeName: "DateTime",
			javaType: "java.time.OffsetDateTime",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.DateTime"
		], [
			graphQLTypeName: "else",
			javaType: "java.lang.String",
			graphQLScalarTypeGetter: "org.allGraphQLCases.demo.GraphQLScalarTypeElse.getElseScalar()"
		], [
			graphQLTypeName: "Long",
			javaType: "java.lang.Long",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.GraphQLLong"
		], [
			graphQLTypeName: "NonNegativeInt",
			javaType: "java.lang.Integer",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.NonNegativeInt"
	] ]
}

// Then, a last code generation, to do a real integration test with another GraphQL server  
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
tasks.register('generateClientCodeForum', com.graphql_java_generator.gradleplugin.GraphQLGenerateCodeTask) {
	mode = 'client'
	copyRuntimeSources = false
	packageName = 'org.forum.client'
	schemaFileFolder = "/src/graphqls/forum/"
	separateUtilityClasses = true
	skipGenerationIfSchemaHasNotChanged = true
	springBeanSuffix = 'Forum'
	targetSourceFolder = "$buildDir/generated/sources/graphqlGradlePluginForum"
	customScalars = [ [ 
			graphQLTypeName: 'Date',
			javaType: 'java.util.Date',
			graphQLScalarTypeStaticField: 'com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date'
	] ]
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////  NEXT LINES ARE HERE ONLY TO ALLOW THE INTEGRATION TESTS AGAINST THE SERVER GENERATED BY GraphQL Generator ////////
//////  That is: this project is both a sample, and an integration test                                           ////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

test {
	// enable JUnit Platform (a.k.a. JUnit 5) support
	useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

//Let's import the custom plugin we defined in buildSrc of the root project
import com.graphql_java_generator.gradle_task.StartApp
import com.graphql_java_generator.gradle_task.StopApp


task startAllGraphQLCasesServer(type: StartApp) {
	// Let's start the server that matches the current client project
	jarFile = file("../${project.name}/build/libs/${project.name}-${project.version}.jar".replaceAll('client', 'server'))
	url = 'http://localhost:8180/helloworld.html'

	// The next lines insures that the relevant server project is built before starting the integration test from this client module.
	dependsOn ":${project.name}:bootJar".replaceAll('client', 'server')

	// The stopWebApp must be attached here. And must run after tests
	finalizedBy 'stopAllGraphQLCasesServer'
}

task stopAllGraphQLCasesServer(type: StopApp) {
	// The line blow is executed during configuration phase. So the process is unknown. 
	// We just define the Task object. The StopApp task will read the process id at execution time
	startAppTask = tasks["startAllGraphQLCasesServer"]

	// The stopWebApp is attached to startWebApp, and must run after tests
	mustRunAfter test
}

task startForumServer(type: StartApp) {
	// Let's start the server that matches the current client project
	jarFile = file("../graphql-gradle-plugin-samples-Forum-server/build/libs/graphql-gradle-plugin-samples-Forum-server-${project.version}.jar")
	url = 'http://localhost:8182/graphiql'

	// The next lines insures that the relevant server project is built before starting the integration test from this client module.
	dependsOn ":graphql-gradle-plugin-samples-Forum-server:bootJar"

	// The stopForumServer must be attached here. And must run after tests
	finalizedBy 'stopForumServer'
}

task stopForumServer(type: StopApp) {
	// The line blow is executed during configuration phase. So the process is unknown. 
	// We just define the Task object. The StopApp task will read the process id at execution time
	startAppTask = tasks["startForumServer"]

	// The stopForumServer is attached to startForumServer, and must run after tests
	mustRunAfter test
}

task startAuthorizationServer(type: StartApp) {
	// Let's start the server that matches the current client project
	jarFile = file("../graphql-gradle-plugin-samples-OAuth-authorization-server/build/libs/graphql-gradle-plugin-samples-OAuth-authorization-server-${project.version}.jar")
	url = 'http://localhost:8181/helloworld.html'

	// The next lines insures that the relevant server project is built before starting the integration test from this client module.
	dependsOn ":graphql-gradle-plugin-samples-OAuth-authorization-server:bootJar"

	// The stopWebApp must be attached here. And must run after tests
	finalizedBy 'stopAuthorizationServer'
}

task stopAuthorizationServer(type: StopApp) {
	// The line blow is executed during configuration phase. So the process is unknown. 
	// We just define the Task object. The StopApp task will read the process id at execution time
	startAppTask = tasks["startAuthorizationServer"]

	// The stopWebApp is attached to startWebApp, and must run after tests
	mustRunAfter test
}

// The next lines insures that the Basic-server is built before starting the integration test from the client.
// Using mustRunAfter instead of dependsOn allows to manually start the server, then just execute the test task.
test.dependsOn startAuthorizationServer
test.dependsOn startAllGraphQLCasesServer
test.dependsOn startForumServer
