buildscript {
    repositories {
		// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
		// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        // The below dependency is used to test the custom templates from a built jar, as it is used by graphql-gradle-plugin
        classpath 'com.graphql-java-generator:graphql-gradle-plugin-samples-CustomTemplates-resttemplate:dummy'
    }
}

plugins {
	id 'java-library'
	id 'application'
	id 'com.graphql-java-generator.graphql-gradle-plugin'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementPluginVersion}"
}

mainClassName = 'org.allGraphQLCases.demo.Main'

repositories {
	mavenCentral()
	// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
	// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
	mavenLocal()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	// The graphql-java-client-dependencies module agregates all dependencies for the generated code
    implementation "com.graphql-java-generator:graphql-java-client-runtime:${project.version}"
    // This project uses some custom scalars from the graphql-java-extended-scalars module
    implementation "com.graphql-java:graphql-java-extended-scalars:${graphqlJavaExtendedScalarsVersion}"
    // This project checks OAuth 
    implementation 'org.springframework.security:spring-security-oauth2-client' 

	// Dependencies for tests
	testImplementation "org.springframework.boot:spring-boot-starter-test"
}

// The default build dir is changed, to check the plugin compatibility with this change
def buildDirectory = "build2"
project.layout.buildDirectory = buildDirectory 


// Let's configure the GraphQL Gradle Plugin, for the merge task
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
generateGraphQLSchema {
	addRelayConnections = true
	schemaFileFolder = 'src/graphqls/allGraphQLCases/'
	targetFolder = "build2/generated/resources/generateGraphQLSchema"
	targetSchemaFileName = 'merged_schemas.graphqls'
}

// Let's configure the GraphQL Gradle Plugin, for the code generation
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
tasks.register('generateClientCodeAllGraphQLCases', com.graphql_java_generator.gradleplugin.GenerateClientCodeTask) {
	// In this sample, the GraphQL code generation works on the generated schema.
	dependsOn generateGraphQLSchema
	
	// Task properties
	generateDeprecatedRequestResponse = true
	packageName = 'org.allGraphQLCases.client'
	schemaFileFolder = "$buildDirectory/generated/resources/generateGraphQLSchema" // Let's read the merged GraphQL schema
	schemaPersonalizationFile = 'src/graphqls/schema_personalization/schema_personalization.json'
	springBeanSuffix = 'AllGraphQLCases'
	
	// Prefixes and suffixes for the generated POJOs
	inputPrefix = "CINP_"
	inputSuffix = "_CINS"
	typePrefix = "CTP_"
	typeSuffix = "_CTS"
	interfacePrefix = "CIP_"
	interfaceSuffix = "_CIS"
	unionPrefix = "CUP_"
	unionSuffix = "_CUS"
	enumPrefix = "CEP_"
	enumSuffix = "_CES"

	customScalars = [ [
			graphQLTypeName: "Base64String",
			javaType: "byte[]",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeBase64String.GraphQLBase64String"
		], [
			graphQLTypeName: "CustomId",
			javaType: "com.generated.graphql.samples.customscalar.CustomId",
			graphQLScalarTypeStaticField: "com.generated.graphql.samples.customscalar.GraphQLScalarTypeCustomId.CustomIdScalarType"
		], [
			graphQLTypeName: "MyCustomScalarForADate",
			javaType: "java.util.Date",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date"
		], [
			graphQLTypeName: "MyCustomScalarForADateTime",
			javaType: "java.time.OffsetDateTime",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.DateTime"
		], [
			graphQLTypeName: "else",
			javaType: "java.lang.String",
			graphQLScalarTypeGetter: "org.allGraphQLCases.demo.GraphQLScalarTypeElse.getElseScalar()"
		], [
			graphQLTypeName: "JSON",
			javaType: "com.fasterxml.jackson.databind.node.ObjectNode",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.Json"
		], [
			graphQLTypeName: "MyBoolean",
			javaType: "java.lang.Boolean",
			graphQLScalarTypeGetter: "com.generated.graphql.samples.customscalar.GraphQLScalarTypeMyBoolean.MyBooleanScalarType"
		], [
			graphQLTypeName: "Long",
			javaType: "java.lang.Long",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.GraphQLLong"
		], [
			graphQLTypeName: "NonNegativeInt",
			javaType: "java.lang.Integer",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.NonNegativeInt"
		], [
			graphQLTypeName: "Object",
			javaType: "java.lang.Object",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.Object"
	] ]
}

//Let's configure a second generation of the same Schema. This allows to check possible collision between Spring Beans
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
tasks.register('generateClientCodeAllGraphQLCases2', com.graphql_java_generator.gradleplugin.GenerateClientCodeTask) {
	// In this sample, the GraphQL code generation works on the generated schema.
	dependsOn generateGraphQLSchema
	
	// Task properties
	copyRuntimeSources = false
	packageName = 'org.allGraphQLCases.client2'
	schemaFileFolder = "$buildDirectory/generated/resources/generateGraphQLSchema" // Let's read the merged GraphQL schema
	separateUtilityClasses = false
	springBeanSuffix = 'AllGraphQLCases2'
	targetSourceFolder = "$buildDirectory/generated/sources/graphqlGradlePlugin2"
	customScalars = [ [
			graphQLTypeName: "Base64String",
			javaType: "byte[]",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeBase64String.GraphQLBase64String"
		], [
			graphQLTypeName: "CustomId",
			javaType: "com.generated.graphql.samples.customscalar.CustomId",
			graphQLScalarTypeStaticField: "com.generated.graphql.samples.customscalar.GraphQLScalarTypeCustomId.CustomIdScalarType"
		], [
			graphQLTypeName: "MyCustomScalarForADate",
			javaType: "java.util.Date",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date"
		], [
			graphQLTypeName: "MyCustomScalarForADateTime",
			javaType: "java.time.OffsetDateTime",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.DateTime"
		], [
			graphQLTypeName: "else",
			javaType: "java.lang.String",
			graphQLScalarTypeGetter: "org.allGraphQLCases.demo.GraphQLScalarTypeElse.getElseScalar()"
		], [
			graphQLTypeName: "JSON",
			javaType: "com.fasterxml.jackson.databind.node.ObjectNode",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.Json"
		], [
			graphQLTypeName: "MyBoolean",
			javaType: "java.lang.Boolean",
			graphQLScalarTypeGetter: "com.generated.graphql.samples.customscalar.GraphQLScalarTypeMyBoolean.MyBooleanScalarType"
		], [
			graphQLTypeName: "Long",
			javaType: "java.lang.Long",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.GraphQLLong"
		], [
			graphQLTypeName: "NonNegativeInt",
			javaType: "java.lang.Integer",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.NonNegativeInt"
		], [
			graphQLTypeName: "Object",
			javaType: "java.lang.Object",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.Object"
	] ]
}


// Then, a last code generation, to do a real integration test with another GraphQL server  
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
tasks.register('generateClientCodeForum', com.graphql_java_generator.gradleplugin.GraphQLGenerateCodeTask) {
	mode = 'client'
	copyRuntimeSources = false
	generateDeprecatedRequestResponse = true
	packageName = 'org.forum.client'
	schemaFileFolder = "/src/graphqls/forum/"
	separateUtilityClasses = false
	skipGenerationIfSchemaHasNotChanged = true
	springBeanSuffix = 'Forum'
	targetSourceFolder = "$buildDirectory/generated/sources/graphqlGradlePluginForum"
	customScalars = [ [ 
			graphQLTypeName: 'Date',
			javaType: 'java.util.Date',
			graphQLScalarTypeStaticField: 'com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date'
	] ]
	templates = [		
		// This custom template should come from an external project, like in the maven plugin project.
		// But custom templates embedded in an external library doesn't seem to be readable from a Gradle plugin, so
		// this custom template has been copied into the ./CustomTemplates-resttemplate of this project, so that the
		// JUnit tests coming from the Maven project still work.
		QUERY_MUTATION: "CustomTemplates-resttemplate/client_query_mutation_type.vm.java",
		//
		SUBSCRIPTION: "src/graphqls/customtemplates/client_subscription_type.vm.java"
	]
}

test {
	// enable JUnit Platform (a.k.a. JUnit 5) support
	useJUnitPlatform()
//    testLogging {
//        events "passed", "skipped", "failed"
//    }
}


// The next lines insures that the necessary servers are started before starting the integration test from the client.
test.dependsOn ":startAuthorizationServer"
test.dependsOn ":startAllGraphQLCasesServer"
test.dependsOn ":startForumServer"
