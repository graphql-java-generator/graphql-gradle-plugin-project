/*
 * This is the port on Gradle of the graphql-java-generator plugin.
 *
 * It's "just" a wrapper over the plugin logic which is available in this maven module: 
 * com.graphql-java-generator:graphql-maven-plugin-logic
 *
 * All unit tests can be found in the com.graphql-java-generator:graphql-maven-plugin-logic.
 * Integration tests are in this GIT project, that also hosts this plugin: 
 * https://github.com/graphql-java-generator/graphql-gradle-plugin-project
 * 
 */
plugins {
  id "com.gradle.plugin-publish" version "0.11.0"
  id "java-gradle-plugin"
  id "eclipse" // For use of this project within eclipse. For refresh, use: gradlew cleanEclipse eclipse
}

apply from: 'common_conf.gradle'

repositories {
	jcenter()
	//mavenCentral()
	//  mavenLocal is used on development site, to get snapshot of the com.graphql-java-generator maven plugin, 
	// and relatives dependencies
	mavenLocal()
}

dependencies {
	// This plugin is a wrapper of the logic already implemented in our maven plugin
	implementation ("com.graphql-java-generator:graphql-maven-plugin-logic:${graphQLJavaGeneratorVersion}") {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		exclude group: 'net.minidev', module: 'json-smart'
	}

	// Dependencies for tests
	testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"  
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

pluginBundle {
	website = 'https://github.com/graphql-java-generator/graphql-gradle-plugin-project'
	vcsUrl = 'https://github.com/graphql-java-generator/graphql-gradle-plugin-project'
	description = 'graphql-gradle-plugin is a Gradle Plugin for GraphQL, based on graphql-java. It accelerates the development for both the client and the server, by generating the Java code.  It allows a quicker development when in contract-first approach, by avoiding to code the boilerplate code.'
	tags = ['graphql', 'graphql-java', 'graphql-java-generator', 'java', 'codegeneration', 'code generation', 'code-generation', 'generation', 'generate', 'template', 'templates']
	
	plugins {
		graphqlPlugin {
			id = 'com.graphql_java_generator.graphql-gradle-plugin'
			displayName = 'graphql-gradle-plugin'
		}
	}
}
