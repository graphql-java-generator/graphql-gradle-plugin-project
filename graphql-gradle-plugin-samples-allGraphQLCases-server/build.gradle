plugins {
	id 'java'
	id 'com.graphql-java-generator.graphql-gradle-plugin3'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementPluginVersion}"
	id 'org.gradlex.extra-java-module-info' version "${extraJavaModuleInfoVersion}" 
}

repositories {
	// The plugin depends on the graphql-maven-plugin plugin logic module, which is in mavenCentral (for releases), and in mavenLocal 
	// when working on the plugin development.
	mavenCentral()
	mavenLocal()		// Only if you work on the plugin development
}

dependencies {
	// The graphql-java-client-dependencies module agregates all dependencies for the generated code
    implementation "com.graphql-java-generator:graphql-java-server-runtime:${project.version}" 

	// Then, the dependencies that are specific to this project
	implementation "org.springframework.boot:spring-boot-starter-websocket"  // Mandatory to activate the web sockets (mandatory for subscription)
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"

    // This project uses some custom scalars from the graphql-java-extended-scalars module
    implementation "com.graphql-java:graphql-java-extended-scalars:${graphqlJavaExtendedScalarsVersion}"
	
    implementation "com.github.dozermapper:dozer-core:${dozerVersion}"

	// Dependencies for tests
	testImplementation "org.springframework.boot:spring-boot-starter-test"
}

// There is an issue with dozer under gradle. We need to define the dozer Java Module "ourselves":
extraJavaModuleInfo {
    module("com.github.dozermapper:dozer-core", "dozer.core") {
    	exports('com.github.dozermapper.core')
    }
    module('commons-beanutils:commons-beanutils', 'org.apache.commons.beanutils') {
        exports('org.apache.commons.beanutils')
        requires('org.apache.commons.logging')
    }
    module('commons-collections:commons-collections', 'org.apache.commons.collections') {
        exports('org.apache.commons.collections')
    }
    module('com.github.stephenc.jcip:jcip-annotations', 'jcip.annotations') {
        exports('net.jcip.annotations')
    }

    module('net.minidev:json-smart', 'net.minidev.json.smart') {
        exports('net.minidev.json')
    }
    module('org.awaitility:awaitility', 'org.awaitility') {
        exports('org.awaitility')
    }
    module('org.skyscreamer:jsonassert', 'org.skyscreamer.jsonassert') {
        exports('org.skyscreamer.jsonassert')
    }
    module('net.minidev:accessors-smart', 'net.minidev.accessors.smart') {
        exports('net.minidev.accessor')
    }
    module('com.vaadin.external.google:android-json', 'com.vaadin.external.google.android.json') {
        exports('org.json')
    }
}

// The line below adds the generated sources as a java source folder, in the IDE
sourceSets.main.java.srcDirs += '/build/generated/sources/graphqlGradlePlugin'
sourceSets.main.resources.srcDirs += '/build/generated/resources/graphqlGradlePlugin'

// Let's configure the GraphQL Gradle Plugin
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
generateServerCodeConf {
	addRelayConnections = true
	generateBatchLoaderEnvironment = true
	generateDataFetcherForEveryFieldsWithArguments = true
	ignoredSpringMappings = " Bar140 , IBar140 Character.name MyQueryType.checkOverriddenController "
	packageName = 'org.allGraphQLCases.server'
	separateUtilityClasses = false
	schemaFileFolder = '../graphql-gradle-plugin-samples-allGraphQLCases-client/src/graphqls/allGraphQLCases'
	schemaPersonalizationFile = '/src/main/graphql/schema_personalization.json'
	targetSchemaSubFolder = 'graphql_schema'

	// prefixes and suffixes for the generated POJOs	
	inputPrefix = "SINP_"
	inputSuffix = "_SINS"
	typePrefix = "STP_"
	typeSuffix = "_STS"
	interfacePrefix = "SIP_"
	interfaceSuffix = "_SIS"
	unionPrefix = "SUP_"
	unionSuffix = "_SUS"
	enumPrefix = "SEP_"
	enumSuffix = "_SES"
	
	customScalars = [ [
			graphQLTypeName: "Base64String",
			javaType: "byte[]",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeBase64String.GraphQLBase64String"
		], [
			graphQLTypeName: "CustomId",
			javaType: "com.generated.graphql.samples.customscalars.CustomId",
			graphQLScalarTypeStaticField: "com.generated.graphql.samples.customscalars.GraphQLScalarTypeCustomId.CustomIdScalarType"
		], [
			graphQLTypeName: "MyCustomScalarForADate",
			javaType: "java.util.Date",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date"
		], [
			graphQLTypeName: "MyCustomScalarForADateTime",
			javaType: "java.time.OffsetDateTime",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.DateTime"
		], [
			graphQLTypeName: "else",
			javaType: "java.lang.String",
			graphQLScalarTypeGetter: "com.generated.graphql.samples.customscalars.GraphQLScalarTypeElse.getElseScalar()"
		], [
			graphQLTypeName: "JSON",
			javaType: "com.fasterxml.jackson.databind.node.ObjectNode",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.Json"
		], [
			graphQLTypeName: "MyBoolean",
			javaType: "java.lang.Boolean",
			graphQLScalarTypeGetter: "com.generated.graphql.samples.customscalars.GraphQLScalarTypeMyBoolean.MyBooleanScalarType"
		], [
			graphQLTypeName: "Long",
			javaType: "java.lang.Long",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.GraphQLLong"
		], [
			graphQLTypeName: "NonNegativeInt",
			javaType: "java.lang.Integer",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.NonNegativeInt"
		], [
			graphQLTypeName: "Object",
			javaType: "java.lang.Object",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.Object"
	] ]
}

test {
	// enable JUnit Platform (a.k.a. JUnit 5) support
	useJUnitPlatform()
}