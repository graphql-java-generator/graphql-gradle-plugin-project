
buildscript {
    repositories {
		// The plugin depends on the graphql-maven-plugin, whose snapshot versions are on the local maven repository.
		// So, for development reason, we need to access to the local maven repository. It's useless for standard use of the plugin
        mavenLocal()
        mavenCentral()
    }
    
    dependencies {
    	// The version number is not used in this multi-module project: the included build of graphql-gradle-plugin
    	// will replace this declaration. But this dummy declaration is needed!
    	//
    	// Of course, for a real use of the plugin in your project, you'll have to replace by the last plugin's version,
    	// or better: put this version number in the gradle.properties file, to use it for both the plugin and the dependencies version
        classpath 'com.graphql-java-generator:graphql-gradle-plugin:dummy'
        
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.4.0'
    }
}

plugins {
	id 'java'
	id 'com.graphql-java-generator.graphql-gradle-plugin'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementPluginVersion}"
}

repositories {
	// The plugin depends on the graphql-maven-plugin plugin logic module, which is in mavenCentral (for releases), and in mavenLocal 
	// when working on the plugin development.
	mavenCentral()
	mavenLocal()		// Only if you work on the plugin development
}

dependencies {
	// The graphql-java-client-dependencies module agregates all dependencies for the generated code
    implementation "com.graphql-java-generator:graphql-java-server-runtime:${project.version}" 

	// Then, the dependencies that are specific to this project
	implementation "org.springframework.boot:spring-boot-starter-websocket"  // Mandatory to activate the web sockets (mandatory for subscription)
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"

    // This project uses some custom scalars from the graphql-java-extended-scalars module
    implementation "com.graphql-java:graphql-java-extended-scalars:${graphqlJavaExtendedScalarsVersion}"
	
    implementation "com.github.dozermapper:dozer-core:${dozerVersion}"

	// Dependencies for tests
	testImplementation "org.springframework.boot:spring-boot-starter-test"
}

// The line below adds the generated sources as a java source folder, in the IDE
sourceSets.main.java.srcDirs += '/build/generated/sources/graphqlGradlePlugin'
sourceSets.main.resources.srcDirs += '/build/generated/resources/graphqlGradlePlugin'

// Let's configure the GraphQL Gradle Plugin
// (the plugin will automatically add it as a dependency to compileJava and processResources) 
generateServerCodeConf {
	addRelayConnections = true
	generateBatchLoaderEnvironment = true
	packageName = 'org.allGraphQLCases.server'
	separateUtilityClasses = false
	schemaFileFolder = '../graphql-gradle-plugin-samples-allGraphQLCases-client/src/graphqls/allGraphQLCases'

	// prefixes and suffixes for the generated POJOs	
	inputPrefix = "SINP_"
	inputSuffix = "_SINS"
	typePrefix = "STP_"
	typeSuffix = "_STS"
	interfacePrefix = "SIP_"
	interfaceSuffix = "_SIS"
	unionPrefix = "SUP_"
	unionSuffix = "_SUS"
	enumPrefix = "SEP_"
	enumSuffix = "_SES"
	
	customScalars = [ [
			graphQLTypeName: "Base64String",
			javaType: "byte[]",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeBase64String.GraphQLBase64String"
		], [
			graphQLTypeName: "CustomId",
			javaType: "com.generated.graphql.samples.customscalar.CustomId",
			graphQLScalarTypeStaticField: "com.generated.graphql.samples.customscalar.GraphQLScalarTypeCustomId.CustomIdScalarType"
		], [
			graphQLTypeName: "Date",
			javaType: "java.util.Date",
			graphQLScalarTypeStaticField: "com.graphql_java_generator.customscalars.GraphQLScalarTypeDate.Date"
		], [
			graphQLTypeName: "DateTime",
			javaType: "java.time.OffsetDateTime",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.DateTime"
		], [
			graphQLTypeName: "else",
			javaType: "java.lang.String",
			graphQLScalarTypeGetter: "org.allGraphQLCases.server.impl.GraphQLScalarTypeElse.getElseScalar()"
		], [
			graphQLTypeName: "Long",
			javaType: "java.lang.Long",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.GraphQLLong"
		], [
			graphQLTypeName: "NonNegativeInt",
			javaType: "java.lang.Integer",
			graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.NonNegativeInt"
	] ]
}
